# -------------------------------------------------------------
# Set file paths, load libraries etc.
# -------------------------------------------------------------
library(googlesheets4)
library(raster); library(rgdal); library(rgeos) # spatial analysis packages
library(ggplot2); library(grid) # graphing packages
library(lubridate)
# Source my cleaning function
source("clean_google_form.R")
# install.packages("devtools")
library('devtools')
library(googlesheets4); library(car); library(lubridate)
library(ggplot2)
if(!dir.exists("../data")) dir.create("../data/")
if(!dir.exists("../figures/")) dir.create("../figures/")
# -----------------------------------
# 1. Arb Data
# -----------------------------------
source("clean_google_form.R")
# Downloading 2020 data
quercus20 <- clean.google(collection="Quercus", dat.yr=2020)
quercus20$Collection <- as.factor("Quercus")
quercus20$Year <- lubridate::year(quercus20$Date.Observed)
summary(quercus20)
if(!dir.exists("../data")) dir.create("../data/")
if(!dir.exists("../figures/")) dir.create("../figures/")
# -----------------------------------
# 1. Arb Data
# -----------------------------------
source("clean_google_form.R")
if(!dir.exists("../data")) dir.create("../data/")
if(!dir.exists("../figures/")) dir.create("../figures/")
# -----------------------------------
# 1. Arb Data
# -----------------------------------
source("clean_google_form.R")
#         NCD = Number of chilling days
#         GTmean = Growing season mean temperature
# Notes: The defaults for this funcion are
#       Starting year of interest                       y_start = 1975
#       Ending year of interest                         y_end = 2019
#       Julian yday for start of growing season         g_start = 1
#       Julian yday for end of growing season           g_end = 120
#
#-----------------------------------------------------------------------------------------------------------------------------------#
# Calculating the Tmean for the growing season of that year
weather_calc <- function(met.all, g_start=1, g_end=120){
#Calculating mean temperature, growing degree days using 5C, and gorwing degree days using 0c
met.all$TMEAN <- (met.all$tmax..deg.c. + met.all$tmin..deg.c.)/2
met.all$GDD5 <- ifelse(met.all$TMEAN>5, met.all$TMEAN-5, 0)
met.all$GDD0 <- ifelse(met.all$TMEAN>0, met.all$TMEAN, 0)
#Creating empty columns to fill in the loop
met.all$GDD5.cum <- NA
met.all$GDD0.cum <- NA
met.all$NCD <- NA
#Setting the beginning and end (using julian yday) of the growing season for our Growing season mean
g_start <- 1
g_end <- 120
# Calculate the cumulative growing degree days for each day/year
for(YR in unique(met.all$year)){
dat.tmp <- met.all[met.all$year==YR, ]
dat.gtmean <- dat.tmp[(dat.tmp$yday>=g_start & dat.tmp$yday<=g_end), ]
gtmean <- mean(dat.gtmean$TMEAN, na.rm = TRUE)
dat.tmp$Date <- as.Date(paste(dat.tmp$year, dat.tmp$yday, sep="-"), format="%Y-%j")
gdd5.cum=0; gdd0.cum=0
d5.miss = 0; d0.miss=0
ncd = 0
for(i in 1:nrow(dat.tmp)){
if(is.na(dat.tmp$GDD5[i]) & d5.miss<=7){ #YOU CHANGED THIS TO 7 FOR NOW BUT CHANGE BACK
d5.miss <- d5.miss+1 # Let us miss up to 3 consecutive days
gdd5.cum <- gdd5.cum+0
} else {
d5.miss = 0 # reset to 0
gdd5.cum <- gdd5.cum+dat.tmp$GDD5[i]
}
if(is.na(dat.tmp$GDD0[i]) & d0.miss<=7){ #YOU CHANGED THIS TO 7 FOR NOW BUT CHANGE BACK
d0.miss <- d0.miss+1 # Let us miss up to 3 consecutive days
gdd0.cum <- gdd0.cum+0
} else {
d0.miss = 0 # reset to 0
gdd0.cum <- gdd0.cum+dat.tmp$GDD0[i]
}
if(!is.na(dat.tmp$TMEAN[i]) & dat.tmp$TMEAN[i] < 0){
ncd <- ncd + 1
}
dat.tmp[i,"GDD5.cum"] <- gdd5.cum
dat.tmp[i,"GDD0.cum"] <- gdd0.cum
dat.tmp[i, "NCD"] <- ncd
dat.tmp[i, "GTmean"] <- gtmean
}
met.all[met.all$year==YR, "GDD5.cum"] <- dat.tmp$GDD5.cum
met.all[met.all$year==YR, "GDD0.cum"] <- dat.tmp$GDD0.cum
met.all[met.all$year==YR, "NCD"] <- dat.tmp$NCD
met.all[met.all$year==YR, "GTmean"] <- dat.tmp$GTmean
met.all[met.all$year==YR, "Date"] <- dat.tmp$Date
}
return(met.all)
}
# ---------------------------------
# 0. Set up some general file paths
# ---------------------------------
library(ggplot2)
library(gghighlight)
library(dplyr)
path.google <- "~/Google Drive/My Drive" # Mac
path.dat <- file.path(path.google,"/LivingCollections_Phenology/Data_Observations")
path.figs <- "~/Google Drive/My Drive/LivingCollections_Phenology/Reports/2023_02_End_Of_Year_Report/figures_2023_end"
if(!dir.exists("../data")) dir.create("../data/")
if(!dir.exists("../figures/")) dir.create("../figures/")
dir.met <- "../data_raw/meteorology"
dir.create(dir.met, recursive=T, showWarnings = F)
# ---------------------------------
# 1. NOAA COOP Station data
# Use FedData Package to download station data and put it here
# ---------------------------------
ID="USC00115097"
vars.want <- c("TMAX", "TMIN", "PRCP", "SNOW", "SNWD")
path.ghcn=c("../data_raw/meteorology/GHCN_extracted/")
dir.raw="../data_raw/meteorology/GHCN_raw/"
source("phenology weather/met_download_GHCN.R");
source("phenology weather/met_gapfill.R")
path.google <- "~/Google Drive/My Drive" # Mac
path.figs <- "~/Google Drive/My Drive/LivingCollections_Phenology/Reports/2023_02_End_Of_Year_Report/figures_2023_end"
if(!dir.exists("../data")) dir.create("../data/")
if(!dir.exists("../figures/")) dir.create("../figures/")
dir.met <- "../data_raw/meteorology"
dir.create(dir.met, recursive=T, showWarnings = F)
# ---------------------------------
# 1. NOAA COOP Station data
# Use FedData Package to download station data and put it here
# ---------------------------------
ID="USC00115097"
vars.want <- c("TMAX", "TMIN", "PRCP", "SNOW", "SNWD")
path.ghcn=c("../data_raw/meteorology/GHCN_extracted/")
dir.raw="../data_raw/meteorology/GHCN_raw/"
source("phenology weather/met_download_GHCN.R");
met.gapfill <- function(met.data, met.var){
val.vec <- met.data[,met.var]
val.na <- which(is.na(val.vec))
if(length(val.na)==0){
print("Done: No gapfilling necessary.")
# break
# return
}
while(length(val.na)>0){
if(val.na[1]==1){
stop("Missing first data point! Stop and re-evaluate")
# break
}
gap.now <- val.na[1]
if(length(val.na)>1){
for(i in 2:length(val.na)){
if(val.na[i] == gap.now[length(gap.now)]+1){
gap.now <- c(gap.now, val.na[i])
} else break
}
}
obs.start <- min(gap.now)-1 # The last observation you had before the break
obs.next <-  max(gap.now)+1 # The next observation you have
# Create a straight line through the missing data
obs.fill <- seq(met.data[obs.start, met.var], met.data[obs.next, met.var], length.out = length(gap.now)+2)
obs.fill <- obs.fill[2:(length(obs.fill)-1)] # Trim out the observed start/end
# Put the gap filled data back in palce
val.vec[gap.now] <- obs.fill
# Update our missing values
val.na <- which(is.na(val.vec))
# return(met.data)
if(length(val.na)==0){
print(paste0(met.var, " gapfilling complete"))
return(val.vec)
break
}
if(val.na[length(val.na)]==nrow(met.data)){
warning("Missing last data point! Stop and re-evaluate")
return(val.vec)
break
}
}
}
source("phenology weather/met_download_GHCN.R");
source("phenology weather/met_gapfill.R")
